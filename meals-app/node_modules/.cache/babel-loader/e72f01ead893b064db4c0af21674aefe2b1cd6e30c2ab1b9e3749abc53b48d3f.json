{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const options = {\n      headers: {\n        'content-type': 'text/plain'\n      }\n    };\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        const response = await axios.get('http://localhost:3002/api/getmeals', {\n          signal\n        });\n        console.log(response);\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    // return () => {\n    //     controller.abort();\n    //   };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","options","headers","fetchData","signal","response","get","console","log","status","errorMessage","statusText","Error","error","message"],"sources":["/Users/Zainab/Desktop/TransitGtaewayApp/frontend/meals-app/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const options = { headers: \n        {\n            'content-type': 'text/plain'\n        }}\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        const response = await axios.get('http://localhost:3002/api/getmeals', { signal });\n        console.log(response)\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    // return () => {\n    //     controller.abort();\n    //   };\n    \n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,QAAQA,CAACC,UAAU,EAAEC,kBAAkB,EAAE;EAAAC,EAAA;EAC/D;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMa,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;EAExCb,SAAS,CAAC,MAAM;IACd;IACAW,UAAU,CAAC,IAAI,CAAC;IAChBF,UAAU,CAAC,KAAK,CAAC;;IAEjB;IACA,MAAMK,OAAO,GAAG;MAAEC,OAAO,EACrB;QACI,cAAc,EAAE;MACpB;IAAC,CAAC;;IAEN;IACA,eAAeC,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,MAAM,GAAGL,UAAU,CAACK,MAAM;QAChC,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,oCAAoC,EAAE;UAAEF;QAAO,CAAC,CAAC;QAClFG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;QAErB;QACA,IAAIA,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UAC3Bb,UAAU,CAAC,IAAI,CAAC;UAChBF,OAAO,CAACW,QAAQ,CAAC,CAAC,CAAC;QACrB,CAAC,MAAM;UACL,MAAMK,YAAY,GAAGL,QAAQ,CAACZ,IAAI,CAACiB,YAAY,IAAIL,QAAQ,CAACZ,IAAI,CAACkB,UAAU;UAC3E,MAAM,IAAIC,KAAK,CAAC,gBAAgBP,QAAQ,CAACI,MAAM,oBAAoBC,YAAY,EAAE,CAAC;QACpF;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAACA,KAAK,CAACC,OAAO,CAAC;QAC5BpB,OAAO,CAAC;UAAEmB,KAAK,EAAEA,KAAK,CAACC;QAAQ,CAAC,CAAC;QACjClB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,SAAS;QACR;QACAE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;;IAEA;IACA,IAAIR,UAAU,EAAE;MACda,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLL,UAAU,CAAC,KAAK,CAAC;MACjBF,UAAU,CAAC,IAAI,CAAC;IAClB;;IAEA;IACA;IACA;IACA;IACA;;IAGA;EACF,CAAC,EAAE,CAACN,UAAU,EAAEC,kBAAkB,CAAC,CAAC;;EAEpC;EACA,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAQ,CAAC;AACnC;AAACL,EAAA,CAjEuBH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}